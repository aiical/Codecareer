javascript提供了许多函数供开发人员使用，下面给出一个简单介绍，更详细的信息请参考Visual InterDev提供的在线帮助。 
　　javascript函数一共可分为五类： 
　　・常规函数 
　　・数组函数 
　　・日期函数 
　　・数学函数 
　　・字符串函数 
　　1.常规函数 
　　javascript常规函数包括以下9个函数： 
　　(1)alert函数：显示一个警告对话框，包括一个OK按钮。 
　　(2)confirm函数：显示一个确认对话框，包括OK、Cancel按钮。 
　　(3)escape函数：将字符转换成Unicode码。 
　　(4)eval函数：计算表达式的结果。 
　　(5)isNaN函数：测试是(true)否(false)不是一个数字。 
　　(6)parseFloat函数：将字符串转换成符点数字形式。 
　　(7)parseInt函数：将符串转换成整数数字形式(可指定几进制)。 
　　(8)prompt函数：显示一个输入对话框，提示等待用户输入。例如： 
　　<script language="javascript"> 
　　<!-- 
　　alert("输入错误"); 
　　prompt("请输入您的姓名","姓名"); 
　　confirm("确定否！"); 
　　//--> 
　　script> 
　　(9)unescape函数：解码由escape函数编码的字符。 
　　2.数组函数 
　　javascript数组函数包括以下4个函数： 
　　(1)join函数：转换并连接数组中的所有元素为一个字符串。例: 
　　　　function JoinDemo() 
　　　　{ 
　　　　　var a, b; 
　　　　　a = new Array(0,1,2,3,4); 
　　　　　b = a.join("-");//分隔符 
　　　　　return(b);//返回的b=="0-1-2-3-4" 
　　　　} 
　　(2)length函数：返回数组的长度。例： 
　　　　function LengthDemo() 
　　　　{ 
　　　　　var a, l; 
　　　　　a = new Array(0,1,2,3,4); 
　　　　　l = a.length; 
　　　　　return(l);//l==5 
　　　　} 
　　(3)reverse函数：将数组元素顺序颠倒。例： 
　　　function ReverseDemo() 
　　　{ 
　　　　var a, l; 
　　　　a = new Array(0,1,2,3,4); 
　　　　l = a.reverse(); 
　　　　return(l); 
　　　} 
　　(4)sort函数：将数组元素重新排序。例： 
　　　　function SortDemo() 
　　　　{ 
　　　　　var a, l; 
　　　　　a = new Array("X" ,"y" ,"d", "Z", "v","m","r"); 
　　　　　l = a.sort(); 
　　　　　return(l); 
　　　　} 
　　3.日期函数 
　　javascript日期函数包括以下20个函数： 
　　(1)getDate函数：返回日期的"日"部分，值为1～31。例： 
　　　function DateDemo() 
　　　{ 
　　　　var d, s = "Today's date is: "; 
　　　　d = new Date(); 
　　　　s += (d.getMonth() + 1) + "/"; 
　　　　s += d.getDate() + "/"; 
　　　　s += d.getYear(); 
　　　　return(s); 
　　　} 
　　(2)getDay函数：返回星期几，值为0～6，其中0表示星期日，1表示星期一，...，6表示星期六。例： 
　　　function DateDemo() 
　　　{ 
　　　　var d, day, x, s = "Today is: "; 
　　　　var x = new Array("Sunday", "Monday", "Tuesday"); 
　　　　var x = x.concat("Wednesday","Thursday", "Friday"); 
　　　　var x = x.concat("Saturday"); 
　　　　d = new Date(); 
　　　　day = d.getDay(); 
　　　　return(s += x[day]); 
　　　} 
　　(3)getHouse函数：返回日期的"小时"部分，值为0～23。例。 
　　　function TimeDemo() 
　　　{ 
　　　　var d, s = "The current local time is: "; 
　　　　var c = ":"; 
　　　　d = new Date(); 
　　　　s += d.getHours() + c; 
　　　　s += d.getMinutes() + c; 
　　　　s += d.getSeconds() + c; 
　　　　s += d.getMilliseconds(); 
　　　　return(s); 
　　　} 
　　(4)getMinutes函数：返回日期的"分钟"部分，值为0～59。见上例。 
　　(5)getMonth函数：返回日期的"月"部分，值为0～11。其中0表示1月，2表示3月，...，11表示12月。见前面的例子。 
　　(6)getSeconds函数：返回日期的"秒"部分，值为0～59。见前面的例子。 
　　(7)getTime函数：返回系统时间。 
　　　function GetTimeTest() 
　　　{ 
　　　　var d, s, t; 
　　　　var MinMilli = 1000 * 60; 
　　　　var HrMilli = MinMilli * 60; 
　　　　var DyMilli = HrMilli * 24; 
　　　　d = new Date(); 
　　　　t = d.getTime(); 
　　　　s = "It's been " 
　　　　s += Math.round(t / DyMilli) + " days since 1/1/70"; 
　　　　return(s); 
　　　} 
　　(8)getTimezoneOffset函数：返回此地区的时差(当地时间与GMT格林威治标准时间的地区时差)，单位为分钟。 
　　　function TZDemo() 
　　　{ 
　　　　var d, tz, s = "The current local time is "; 
　　　　d = new Date(); 
　　　　tz = d.getTimezoneOffset(); 
　　　　if (tz < 0) 
　　　　s += tz / 60 + " hours before GMT"; 
　　　　else if (tz == 0) 
　　　　s += "GMT"; 
　　　　else 
　　　　s += tz / 60 + " hours after GMT"; 
　　　　return(s); 
　　　} 
　　(9)getYear函数：返回日期的"年"部分。返回值以1900年为基数，例如1999年为99。前面有例子。 
　　(10)parse函数：返回从1970年1月1日零时整算起的毫秒数(当地时间)。 
　　　function GetTimeTest(testdate) 
　　　{ 
　　　　var d, s, t; 
　　　　var MinMilli = 1000 * 60; 
　　　　var HrMilli = MinMilli * 60; 
　　　　var DyMilli = HrMilli * 24; 
　　　　d = new Date(); 
　　　　t = Date.parse(testdate); 
　　　　s = "There are " 
　　　　s += Math.round(Math.abs(t / DyMilli)) + " days " 
　　　　s += "between " + testdate + " and 1/1/70"; 
　　　　return(s); 
　　　} 
　　(11)setDate函数：设定日期的"日"部分，值为0～31。 
　　(12)setHours函数：设定日期的"小时"部分，值为0～23。 
　　(13)setMinutes函数：设定日期的"分钟"部分，值为0～59。 
　　(14)setMonth函数：设定日期的"月"部分，值为0～11。其中0表示1月，...，11表示12月。 
　　(15)setSeconds函数：设定日期的"秒"部分，值为0～59。 
　　(16)setTime函数：设定时间。时间数值为1970年1月1日零时整算起的毫秒数。 
　　(17)setYear函数：设定日期的"年"部分。 
　　(18)toGMTString函数：转换日期成为字符串，为GMT格林威治标准时间。 
　　(19)setLocaleString函数：转换日期成为字符串，为当地时间。 
　　(20)UTC函数：返回从1970年1月1日零时整算起的毫秒数，以GMT格林威治标准时间计算。 
　　4.数学函数 
　　javascript数学函数其实就是Math对象，它包括属性和函数(或称方法)两部分。其中，属性主要有下列内容。 
　　Math.e:e(自然对数)、Math.LN2（2的自然对数)、Math.LN10(10的自然对数)、Math.LOG2E(e的对数，底数为2)、Math.LOG10E(e的对数，底数为10)、Math.PI(π)、Math.SQRT1_2(1/2的平方根值)、Math.SQRT2(2的平方根值)。 
　　函数有以下18个： 
　　(1)abs函数：即Math.abs(以下同)，返回一个数字的绝对值。 
　　(2)acos函数：返回一个数字的反余弦值，结果为0～π弧度(radians)。 
　　(3)asin函数：返回一个数字的反正弦值，结果为-π/2～π/2弧度。 
　　(4)atan函数：返回一个数字的反正切值，结果为-π/2～π/2弧度。 
　　(5)atan2函数：返回一个坐标的极坐标角度值。 
　　(6)ceil函数：返回一个数字的最小整数值(大于或等于)。 
　　(7)cos函数：返回一个数字的余弦值，结果为-1～1。 
　　(8)exp函数：返回e(自然对数)的乘方值。 
　　(9)floor函数：返回一个数字的最大整数值(小于或等于)。 
　　(10)log函数：自然对数函数，返回一个数字的自然对数(e)值。 
　　(11)max函数：返回两个数的最大值。 
　　(12)min函数：返回两个数的最小值。 
　　(13)pow函数：返回一个数字的乘方值。 
　　(14)random函数：返回一个0～1的随机数值。 
　　(15)round函数：返回一个数字的四舍五入值，类型是整数。 
　　(16)sin函数：返回一个数字的正弦值，结果为-1～1。 
　　(17)sqrt函数：返回一个数字的平方根值。 
　　(18)tan函数：返回一个数字的正切值。 
　　5.字符串函数 
　　javascript字符串函数完成对字符串的字体大小、颜色、长度和查找等操作，共包括以下20个函数： 
　　(1)anchor函数：产生一个链接点(anchor)以作超级链接用。anchor函数设定的链接点的名称，另一个函数link设定的URL地址。 
　　(2)big函数：将字体加到一号，与...标签结果相同。 
　　(3)blink函数：使字符串闪烁，与...标签结果相同。 
　　(4)bold函数：使字体加粗，与...标签结果相同。 
　　(5)charAt函数：返回字符串中指定的某个字符。 
　　(6)fixed函数：将字体设定为固定宽度字体，与...标签结果相同。 
　　(7)fontcolor函数：设定字体颜色，与标签结果相同。 
　　(8)fontsize函数：设定字体大小，与标签结果相同。 
　　(9)indexOf函数：返回字符串中第一个查找到的下标index，从左边开始查找。 
　　(10)italics函数：使字体成为斜体字，与...标签结果相同。 
　　(11)lastIndexOf函数：返回字符串中第一个查找到的下标index，从右边开始查找。 
　　(12)length函数：返回字符串的长度。(不用带括号) 
　　(13)link函数：产生一个超级链接，相当于设定的URL地址。 
　　(14)small函数：将字体减小一号，与...标签结果相同。 
　　(15)strike函数：在文本的中间加一条横线，与...标签结果相同。 
　　(16)sub函数：显示字符串为下标字(subscript)。 
　　(17)substring函数：返回字符串中指定的几个字符。 
　　(18)sup函数：显示字符串为上标字(superscript)。 
　　(19)toLowerCase函数：将字符串转换为小写。 
　　(20)toUpperCase函数：将字符串转换为大写。


标识可放入head>.. 或 ...之间。将JavaScript标识放置... 在头部之间，使之在主页和其余部分代码之前装载，从而可使代码的功能更强大；将JavaScript标识放置在... 主体之间以实现某些部分动态地创建文档。 
通过标识说明：若不认识JavaScript代码的浏览器，则所有在其中的标识均被忽略；若认识，则执行其结果。使用注释这是一个好的编程习惯，它使其他人可以读懂你的语言。

alert()是JavaScript的窗口对象方法，其功能是弹出一个具有OK对话框并显示（）中的字符串。
比如：
  Language="JavaScript">
alert("这是第一个JavaScript例子!")

Document. write()是文档对象的输出函数，其功能是将括号中的字符或变量值输出到窗口；document. close()是将输出关闭。
比如：
  Language="JavaScript">
document.write ("这是第一个JavaScript例子!")
document. close()

window.external.AddFavorite(' ', '希望网络技术站') 提示把网站加入收藏夹
  Language="JavaScript">
function favorate()
{
window.external.AddFavorite('', '希望网络技术站')
}

onload=favorate() 要加在标签处，如：
※ 如果你想在离开网页时提示加为收藏夹，只需要把 
onunload=favorate() 改成 onload=favorate() 即可 
close()//关闭窗口，如果窗口不是用脚本打开的，会弹出确认对话框。
如：退出系统或
退出系统
给我联系 
confirm() 
//弹出“确定/取消”对话框
  Language="JavaScript">
confirm("确定要删除选中的记录吗？")

function document.oncontextmenu()// 禁止鼠标右键；
  Language="JavaScript">
function document.oncontextmenu(){     window.event.returnValue = false;  } 

function document.onselectstart()// 禁止选取
  Language="JavaScript">
function document.onselectstart()
{ return false;     } 

window.prompt()就是一个窗口对象的方法，其基本作用是，当装入Web页面时在屏幕上显示一个具有“确定”和“取消”的对话框，让你输出数据。
  Language="JavaScript">
prompt("请输入数据：",0)

alert()方法能创建一个具有OK按钮的对话框；
confirm()方法为编程人员提供一个具有两个按钮的对话框；
prompt()方法允许用户在对话框中输入信息，并可使用默认值，其基本格式如下：
prompt（“提示信息”，默认值）

Window .open()是打开一个新窗口。
基本格式为：Window .open("URL","窗口名字","窗口属性")
window属性参数是由一个字符串列表项它由逗号分隔，它指明了有关新创建窗口的属性。
参 数 
 设定值 
 含 义 
 
toolbar 
 yes/no 
 建立或不建立标准工具条 
 
location 
 yes/no 
 建立或不建立位置输入字段 
 
directions 
 yes/no 
 建立或不建立标准目录按钮 
 
status 
 yes/no 
 建立或不建立状态条 
 
menubar 
 yes/no 
 建立或不建立菜单条 
 
scrollbar 
 yes/no 
 建立或不建立滚动条 
 
revisable 
 yes/no 
 能否改变窗口大小 
 
width 
 yes/no 
 确定窗口的宽度 
 
Height 
 yes/no 
 确定窗口的高度。
 



信息数据的输出显示。比较常用的有window.alert()、document.write和及document.writln()方法。
write()和writeln()方法都是用于向浏览器窗口输出文本字串；二者的唯一区别就是writeln()方法自动在文本之后加入回车符。
alert()方法是window对象的一个方法，因此在使用时，不需要写window窗口对象名，而是直接使用就行了。它主要用途用在输出时产生有关警告提示信息或提示用户，一旦用户按“确定”钮后，方可继续执行其他脚本程序。 
document.write(document.lastModified)可以产生最后修改日期。
  Language="JavaScript">


JavaScript 本身是会区分大小写的， lastmodified 与 lastModified，在它看来是不同的结果。document.lastModified 参数在 Netscape 2.0 beta 2 版时是被写成documeut.lastmodified 的，然而，之後的版本就改为 document.lastModified。所以书写时要注意大小写。

在传统的标签中加入onMouseOver的method，可以达到一定的效果。
如：

window.status是用来让你可以在WWW浏览器的状态列上显示一些讯息用的。在语法中， 你 可以看到讯息部分是用 ' 括起来的部分，而非以" 括起来，在讯息部分结束之后， 必须加 上 ; return true。
可以用onMouseOver的method配合事件发生时去呼叫函数。

