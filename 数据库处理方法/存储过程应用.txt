【数据库】SQL SERVER数据库开发之存储过程应用
　　可能有不少朋友使用SQL SERVER做开发也已经有段日子，但还没有或者很少在项目中使用存储过程，或许有些朋友认为根本没有必要使用存储过程等等。其实当你一个项目做完到了维护阶段时，就会发现存储过程给我们带来了好处了，修改方便，不能去改我们的应用程序，只需要改存储过程的内容，而且还可以使我们的程序速度得到提高。

QUOTE:SQL SERVER 联机丛书中的定义：
　　存储过程是保存起来的可以接受和返回用户提供的参数的 Transact-SQL 语句的集合。
　　可以创建一个过程供永久使用，或在一个会话中临时使用（局部临时过程），或在所有会话中临时使用（全局临时过程）。
　　也可以创建在 Microsoft SQL Server 启动时自动运行的存储过程。
　　要使用存储过程，首先我们必需熟悉一些基本的T-SQL语句，因为存储过程是由于一组T-SQL语句构成的，并且，我们需要了解一些关于函数、过程的概念，因为我们需要在应用程序中调用存储过程，就像我们调用应用程序的函数一样，不过调用的方法有些不同。

　　下面我们来看一下存储过程的建立和使用方法。

一、创建存储过程

　　和数据表一样，在使用之前我们需要创建存储过程，它的简明语法是：

QUOTE:CREATE PROC 存储过程名称
[参数列表（多个以“,”分隔）]
AS
SQL 语句
例：

QUOTE:CREATE PROC upGetUserName
@intUserId INT,
@ostrUserName NVARCHAR(20) OUTPUT -- 要输出的参数
AS
BEGIN
-- 将uName的值赋给 @ostrUserName 变量，即要输出的参数
SELECT @ostrUserName=uName FROM uUser WHERE uId=@intUserId
END
　　其中 CREATE PROC 语句（完整语句为CREATE PROCEDURE）的意思就是告诉SQL SERVER，现在需要建立一个存储过程，upGetUserName 就是存储过程名称，@intUserId 和 @ostrUserName 分别是该存储过程的两个参数，注意，在SQL SERVER中，所有用户定义的变量都以“@”开头，OUTPUT关键字表示这个参数是用来输出的，AS之后就是存储过程内容了。只要将以上代码在“查询分析器”里执行一次，SQL SERVER就会在当前数据库中创建一个名为“upGetUserName”的存储过程。你可以打开“企业管理器”，选择当前操作的数据库，然后在左边的树型列表中选择“存储过程”，此时就可以在右边的列表中看到你刚刚创建的存储过程了（如果没有，刷新一下即可）。

二、存储过程的调用

　　之前我们已经创建了一个名为“upGetUserName”的存储过程，从字面理解该存储过程的功能是用来取得某一个用户的名称。存储过程建立好了，接下来就是要在应用程序里调用了，下面看一下在ASP程序里的调用。

QUOTE:Dim adoComm
'// 创建一个对象，我们用来调用存储过程
Set adoComm = CreateObject("ADODB.Command")
With adoComm
'// 设置连接，设 adoConn 为已经连接的 ADODB.Connection 对象
.ActiveConnection = adoConn
'// 类型为存储过程，adCmdStoredProc = 4
.CommandType = 4
'// 存储过程名称
.CommandText = "upGetUserName"
'// 设置用户编号
.Parameters.Item("@intUserId").Value = 1
'// 执行存储过程
.Execute

'// 取得从存储过程返回的用户名称
Response.Write "用户名：" & .Parameters.Item("@ostrUserName").Value
End With
'// 释放对象
Set adoComm = Nothing
　　通过以上两步，我们已经可以创建和使用简单的存储过程了。下面我们来看一个稍微复杂点的存储过程，以进一步了解存储过程的应用。

三、存储过程的实际应用

　　用户登录在ASP项目中经常会使用到，相信很多朋友也都做过类似的系统，但使用存储过程来做验证朋友可能不多，那么我们就以它来做例子，写一个简单的用户登录验证的存储过程。

QUOTE:CREATE PROC upUserLogin
@strLoginName NVARCHAR(20),
@strLoginPwd NVARCHAR(20),
@blnReturn BIT OUTPUT
AS
-- 定义一个临时用来保存密码的变量
DECLARE @strPwd NVARCHAR(20)
BEGIN
-- 从表中查询当前用户的密码，赋值给 @strPwd 变量，下面要对他进行比较
SELECT @strPwd=uLoginPwd FROM uUser WHERE uLoginName=@strLoginName

IF @strLoginPwd = @strPwd
BEGIN
SET @blnReturn = 1
-- 更新用户最后登录时间
UPDATE uUser SET uLastLogin=GETDATE() WHERE uLoginName=@strLoginName
END
ELSE
SET @blnReturn = 0
END
　　用户登录的存储过程建立好了，现在在程序里试一下吧。注意，在一个区域内如果有多条语句时，必需使用BEGIN...END关键字。

QUOTE:Dim adoComm
'// 创建一个对象，我们用来调用存储过程
Set adoComm = CreateObject("ADODB.Command")
With adoComm
'// 设置连接，设 adoConn 为已经连接的 ADODB.Connection 对象
.ActiveConnection = adoConn
'// 类型为存储过程，adCmdStoredProc = 4
.CommandType = 4
'// 存储过程名称
.CommandText = "upUserLogin"
'// 设置登录名称
.Parameters.Item("@strLoginName").Value = "admin"
'// 设置登录密码
.Parameters.Item("@strLoginPwd").Value = "123456"
'// 执行存储过程
.Execute

'// 判断是否登录成功
If .Parameters.Item("@blnReturn").Value = 1 Then
Response.Write "恭喜你，登录成功！"
Else
Response.Write "不是吧，好像错了哦。。。"
End If
End With
'// 释放对象
Set adoComm = Nothing
　　通过以上的步骤，简单用户登录验证过程也做完了，现在只要把它整合到程序中就可以实现简单的用户登录验证了，关于其他细节就由你自己来处理了。
　　上面介绍的两个存储过程都是只返回一个值的，下面我们来看一个返回一个记录集的存储过程。

QUOTE:CREATE PROC upGetUserInfos
@intUserGroup INT
AS
BEGIN
-- 从数据库中抽取符合条件的数据
SELECT uName,uGroup,uLastLogin FROM uUser WHERE uGroup=@intUserGroup
-- 插入一列合计
UNION
SELECT '合计人数:',COUNT(uGroup),NULL FROM uUser WHERE uGroup=@intUserGroup
END
　　现在我们来看一下ASP程序的调用。

QUOTE:Dim adoComm
Dim adoRt
'// 创建一个对象，我们用来调用存储过程
Set adoComm = CreateObject("ADODB.Command")
Set adoRs = CreateObject("ADODB.Recordset")
With adoComm
'// 设置连接，设 adoConn 为已经连接的 ADODB.Connection 对象
.ActiveConnection = adoConn
'// 类型为存储过程，adCmdStoredProc = 4
.CommandType = 4
'// 存储过程名称
.CommandText = "upGetUserInfos"
'// 设置用户组
.Parameters.Item("@intUserGroup").Value = 1
'// 执行存储过程，和以上几个例子不同，这里使用RecordSet的Open方法
adoRs.Open adoComm
'// 显示第一个值
Response.write adoRs.Fields(0).Value
End With
'// 释放对象
Set adoRs = Nothing
Set adoComm = Nothing
　　怎么样，是不是也很简单呢，不过存储过程的用处不仅仅只有这些，他还有更强大的功能，比如使用游标、临时表来从多个表，甚至是多个数据库中调用数据，然后返回给用户，这些你可以在使用过程中慢慢的去发掘。 
